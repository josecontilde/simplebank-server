// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_account_id,
    to_account_id,
    amount
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, created_at, updated_at, deleted_at, from_account_id, to_account_id, amount
`

type CreateTransferParams struct {
	FromAccountID int64           `json:"from_account_id"`
	ToAccountID   int64           `json:"to_account_id"`
	Amount        decimal.Decimal `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :one
DELETE FROM transfers
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, from_account_id, to_account_id, amount
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, deleteTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, created_at, updated_at, deleted_at, from_account_id, to_account_id, amount FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, created_at, updated_at, deleted_at, from_account_id, to_account_id, amount FROM transfers
ORDER BY id DESC
`

func (q *Queries) ListTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers
SET
    from_account_id = $2,
    to_account_id = $3,
    amount = $4
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, from_account_id, to_account_id, amount
`

type UpdateTransferParams struct {
	ID            int64           `json:"id"`
	FromAccountID int64           `json:"from_account_id"`
	ToAccountID   int64           `json:"to_account_id"`
	Amount        decimal.Decimal `json:"amount"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
	)
	return i, err
}

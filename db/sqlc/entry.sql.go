// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entry.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    accounts_id,
    amount
) VALUES (
    $1,
    $2
) RETURNING id, created_at, updated_at, deleted_at, accounts_id, amount
`

type CreateEntryParams struct {
	AccountsID int64           `json:"accounts_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountsID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountsID,
		&i.Amount,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :one
DELETE FROM entries
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, accounts_id, amount
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, deleteEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountsID,
		&i.Amount,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, created_at, updated_at, deleted_at, accounts_id, amount FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountsID,
		&i.Amount,
	)
	return i, err
}

const listEntrys = `-- name: ListEntrys :many
SELECT id, created_at, updated_at, deleted_at, accounts_id, amount FROM entries
ORDER BY id DESC
`

func (q *Queries) ListEntrys(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntrys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.AccountsID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entries
SET
    accounts_id = $2,
    amount = $3
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, accounts_id, amount
`

type UpdateEntryParams struct {
	ID         int64           `json:"id"`
	AccountsID int64           `json:"accounts_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.ID, arg.AccountsID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AccountsID,
		&i.Amount,
	)
	return i, err
}

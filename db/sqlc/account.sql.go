// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package sqlc

import (
	"context"

	"github.com/shopspring/decimal"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET
    balance = balance + $1
WHERE id = $2
RETURNING id, created_at, updated_at, deleted_at, owner, currency, balance
`

type AddAccountBalanceParams struct {
	Amount decimal.Decimal `json:"amount"`
	ID     int64           `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner,
    balance,
    currency
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, created_at, updated_at, deleted_at, owner, currency, balance
`

type CreateAccountParams struct {
	Owner    string          `json:"owner"`
	Balance  decimal.Decimal `json:"balance"`
	Currency string          `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, owner, currency, balance
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, deleted_at, owner, currency, balance FROM accounts 
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, created_at, updated_at, deleted_at, owner, currency, balance FROM accounts 
WHERE id = $1 AND deleted_at IS NULL LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, created_at, updated_at, deleted_at, owner, currency, balance FROM accounts
ORDER BY id DESC
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Owner,
			&i.Currency,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
    owner = $2,
    balance = $3,
    currency = $4
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, owner, currency, balance
`

type UpdateAccountParams struct {
	ID       int64           `json:"id"`
	Owner    string          `json:"owner"`
	Balance  decimal.Decimal `json:"balance"`
	Currency string          `json:"currency"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Owner,
		&i.Currency,
		&i.Balance,
	)
	return i, err
}
